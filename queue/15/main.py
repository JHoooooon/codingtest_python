"""
*   요세푸스 문제

N 명의 사람이 원 형태로 서있다
각 사람은 1 ~ N 까지 번호표를 가지고 있다
그리고 임의의 숫자 K 가 주어졌을때 다음과 같이 사람을 없앤다

-   1 번 번호표를 가진 사람을 기준으로 K 번째 사람을 없앤다
-   없앤 사람 다음 사람을 기준으로 다시 K 번째 사람을 없앤다

N 과 K 가 주어질때 마지막에 살아있는 사람의 번호를 반환하는 solution() 함수를 구현하라

*   제약 조건   

N 과 K 는 1 ~ 1000 이하의 자연수이다

*   입출력의 예

N   K   return
5   2   3

*   문제 분석

-   처음은 1번 번호표를 가진 사람을 기준으로 K 번째 사람을 없앤다
-   그 다음으로 K + 1 기준으로 K 번째 사람을 없앤다
-   N = 5 , k = 2 일때, (1 부터시작)

    -   [1, 2, 3, 4, 5]
    -   [2, 3, 4, 5, 1]
    -   [3, 4, 5, 1]
    -   [4, 5, 1, 3]
    -   [5, 1, 3]
    -   [1, 3, 5]
    -   [3, 5]
    -   [5, 3]
    -   [3]

    결과는 3

*   코드 구현

-   N 개의 배열을 만든다
-   배열의 length 가 1 이 될때까지 순회
    -   K - 1 번째 원소까지 배열의 끝으로 push
    -   배열의 첫번째 원소 pop
-   마지막 원소를 반환

"""

from collections import deque

def solution(n, k):
    queue = deque(range(1, n + 1))

    while(len(queue) > 1):
        for _ in range(k - 1):
            queue.append(queue.popleft())

        queue.popleft()

    return queue[0]

